---
name: Release

concurrency:
  group: queue

# yamllint disable-line rule:truthy
on:
  release:
    types:
      - published
  workflow_run:
    workflows: ['CI']
    branches: ['master']
    types:
      - completed

jobs:
  information:
    if: |
      github.event_name == 'release'
      ||  (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    name: ℹ️ Gather information
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.release.outputs.environment}}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v5
      - name: ℹ️ Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi

          echo "environment=${environment}" >> "$GITHUB_OUTPUT"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

  release:
    name: 👷 Build & Release
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v5
      - name: 🏗 Set up Poetry
        run: pipx install poetry
      - name: 🏗 Set up Python 3.10
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'poetry'
      - name: 🏗 Install workflow dependencies
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: 🏗 Install dependencies
        run: poetry install --no-interaction
      - name: 🏗 Set package version
        run: |
          version="${{ github.event.release.tag_name }}"
          version="${version,,}"
          version="${version#v}"
          poetry version --no-interaction "${version}"
      - name: 🏗 Build package
        run: poetry build --no-interaction
      - name: 🚀 Publish to PyPi
        if: |
          needs.information.outputs.environment == 'stable'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi "${PYPI_TOKEN}"
          poetry publish --no-interaction
